import java.awt.*;
import javax.swing.*;
import java.util.Vector;

public class KenKen extends ProjectGame{
    private JPanel gamePanel;
    private int height=4;
    private int width=4;
    private int[][] startLayout = {
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
    };
    
    private int[][] cageLayout = {
	{1,2,3,4},
	{1,9,3,4},
	{6,9,5,5},
	{6,7,7,8},
    };

    private int[][] goalLayout = {
	{6,1,3,12},
	{6,7,3,12},
	{3,7,2,2},
	{3,1,1,1},
    };

    private String[][] operationLayout = {
	{"*", "+", "+", "*"},
	{"*", "+", "+", "*"},
	{"-", "+", "/", "/"},
	{"-", "-", "-", "+"},
    };
    
    private KenKenButton[][] buttonArray = new KenKenButton[4][4];
    private KenKenButton[] emptySpots;
    private int[] possibleValues = {1,2,3,4};

    public KenKen(JPanel gamePanel){
	this.gamePanel = gamePanel;
	this.createGameGrid();
	this.createSpots();
    }

 
    public void createSpots() {
	int counter = 0;
	for (int row=0; row<height; row++) {
	    for(int col=0; col<width; col++) {
		if (cageLayout[row][col]==1){
		    buttonArray[row][col].setBackground(Color.magenta);
		}
		if (cageLayout[row][col]==2){
		    buttonArray[row][col].setBackground(Color.lightGray);
		}		
		if (cageLayout[row][col]==3){
		    buttonArray[row][col].setBackground(Color.pink);
		}	
		if (cageLayout[row][col]==4){
		    buttonArray[row][col].setBackground(Color.cyan);
		}     
		if (cageLayout[row][col]==5){
		    buttonArray[row][col].setBackground(Color.white);
		}
		if (cageLayout[row][col]==6){
		    buttonArray[row][col].setBackground(Color.pink);
		}
		if (cageLayout[row][col]==7){
		    buttonArray[row][col].setBackground(Color.yellow);
		}
		if (cageLayout[row][col]==8){
		    buttonArray[row][col].setBackground(Color.green);
		}
		if (cageLayout[row][col]==9){
		    buttonArray[row][col].setBackground(Color.orange);
		}
		if (buttonArray[row][col].getValue()==0) {
		    counter++;
		}
	    
	    }
	}

	emptySpots = new KenKenButton[counter];

	int counter2 = 0;
	for (int r=0; r<4; r++){
	    for(int c=0; c<4; c++){		
		if (buttonArray[r][c].getValue()==0){
		    emptySpots[counter2]=buttonArray[r][c];
		    counter2++;
		}
	    }
	}
    }

    public void createGameGrid(){
	for (int row=0; row<4; row++) {
	    for(int col=0; col<4; col++){ 
		KenKenButton jb2 = new KenKenButton(startLayout[row][col]);
		jb2.setGoalNumber(goalLayout[row][col]);
		jb2.setOperation(operationLayout[row][col]);
		buttonArray[row][col] = jb2;
		gamePanel.add(jb2);
	    }
	}
    }
    public boolean checkConstraints(){
	for(int row = 0; row<4; row++){
	    int[] valueCounter = new int[5];
	    for(int column = 0; column<4; column++){
		if(buttonArray[row][column].getValue()!= 0){
		    valueCounter[buttonArray[row][column].getValue()] += 1;
		}
	    }
	    
	    for(int val=0;val<valueCounter.length; val++){
		if (valueCounter[val]>1){
		    return false;
		}
	    }	    
	}
	for(int column=0; column<4; column++){
	    int[] valueCounter = new int[5];
	    for(int row = 0; row<4; row++){
		if(buttonArray[row][column].getValue()!= 0){
		    valueCounter[buttonArray[row][column].getValue()] += 1;

		}
	    }
	    for(int val=0; val<valueCounter.length; val++){
		if (valueCounter[val]>1){
		    return false;
		}
	    }	    
	}
	for (int cage = 1; cage < 10; cage++){
	    Vector<KenKenButton> cageVector = new Vector<KenKenButton>();
	    for (int row = 0; row < 4; row++){
		for (int column = 0; column < 4; column++){
		    if(buttonArray[row][column].getCageIdentifier() == cage){
			cageVector.add((KenKenButton) buttonArray[row][column]);
		    }
		}
	    }
	    if(cageVector.size() == 1 && cageVector.get(0).getValue()!=0){
		if(cageVector.get(0).getValue()!=cageVector.get(0).getGoalNumber()){
		    return false;
		}
	    }
	}

	return true;
    }

    public PuzzleButton[] getEmpty(){
	return this.emptySpots;
    }

    public int[] getPossibleValues(){
	return this.possibleValues;
    }

    public boolean checkCages(){
	for (int cage = 1; cage < 10; cage++){
	    Vector<KenKenButton> cageVector = new Vector<KenKenButton>();
	    for (int row = 0; row < 4; row++){
		for (int column = 0; column < 4; column++){
		    if(buttonArray[row][column].getCageIdentifier() == cage){
			cageVector.add((KenKenButton) buttonArray[row][column]);
		    }
		}
	    }
	    if(cageVector.size() == 2 && cageVector.get(1).getValue()!=0){
		if(cageVector.get(0).getOperation() == "+"){
		    if(cageVector.get(0).getValue() + cageVector.get(1).getValue() != 
		       cageVector.get(1).getGoalNumber()){
			return false;
		    }
		}
		if(cageVector.get(0).getOperation() == "*"){
		    if(cageVector.get(0).getValue() * cageVector.get(1).getValue() != 
		       cageVector.get(1).getGoalNumber()){
			return false;
		    }
		}
		if(cageVector.get(0).getOperation() == "-"){
		    if(!(cageVector.get(0).getValue() - cageVector.get(1).getValue() == cageVector.get(1).getGoalNumber() 
			 || cageVector.get(1).getValue() - cageVector.get(0).getValue() 
			 == cageVector.get(1).getGoalNumber())
		       ){
			return false;
		    }
		}
		if(cageVector.get(0).getOperation() == "/"){
		    if(!(cageVector.get(0).getValue() / cageVector.get(1).getValue() == cageVector.get(1).getGoalNumber() 
			 || cageVector.get(1).getValue() / cageVector.get(0).getValue() 
			 == cageVector.get(1).getGoalNumber())
		       ){
			return false;
		    }
		}
	    }
	    if(cageVector.size() == 1 && cageVector.get(0).getValue()!=0){
		if(cageVector.get(0).getValue()!=cageVector.get(0).getGoalNumber()){
		    return false;
		}
	    }
	}

	return true;
    }

}
